---
import BackToHome from '@/components/BackToHome.astro'
import SEO from '@/components/SEO.astro'
import StructuredData from '@/components/StructuredData.astro'
import BaseLayout from '@/layouts/BaseLayout.astro'
import { getWebPageSchema, getBreadcrumbSchema } from '@/lib/structuredData'
import { BASE_URL } from '@/lib/baseUrl'

const breadcrumbs = getBreadcrumbSchema([
  { name: 'Home', url: BASE_URL },
  { name: 'Tools', url: `${BASE_URL}/tools` },
  { name: 'Regex Tester', url: `${BASE_URL}/tools/regex-tester` }
])

const webPage = getWebPageSchema(
  'Regex Tester | Tools',
  'Test and debug regular expressions with live pattern matching',
  `${BASE_URL}/tools/regex-tester`
)
---

<BaseLayout>
  <SEO
    title='Regex Tester | Tools'
    description='Test and debug regular expressions with live pattern matching'
    slot='seo'
  />
  <StructuredData data={[webPage, breadcrumbs]} slot='head' />

  <div class='mt-16 sm:mt-24'>
    <div class='mb-8 flex items-center justify-between'>
      <div>
        <a
          href='/tools'
          class='mb-4 inline-flex items-center text-sm text-zinc-400 hover:text-zinc-200'
        >
          <svg
            class='mr-2 size-4'
            fill='none'
            viewBox='0 0 24 24'
            stroke='currentColor'
          >
            <path
              stroke-linecap='round'
              stroke-linejoin='round'
              stroke-width='2'
              d='M15 19l-7-7 7-7'></path>
          </svg>
          Back to Tools
        </a>
        <h1 class='font-heading text-3xl font-bold tracking-tight sm:text-4xl'>
          Regex Tester
        </h1>
        <p class='mt-2 text-zinc-400'>
          Test and debug regular expressions
        </p>
      </div>
    </div>

    <div class='mx-auto max-w-6xl'>
      <div
        class='rounded-xl border border-zinc-800 bg-zinc-900/50 p-6 sm:p-8'
        id='regex-app'
      >
      </div>
    </div>
  </div>
</BaseLayout>

<script>
  function initRegexTester() {
    const container = document.getElementById('regex-app')
    if (!container) return

    container.innerHTML = `
      <div class="space-y-6">
        <!-- Regex Pattern Input -->
        <div>
          <label class="mb-2 block text-sm font-medium text-zinc-300">Regular Expression</label>
          <div class="flex gap-2">
            <span class="flex items-center rounded-l-lg border border-r-0 border-zinc-700 bg-zinc-800 px-3 text-zinc-400">/</span>
            <input
              id="regex-pattern"
              type="text"
              class="flex-1 border-x-0 border-y border-zinc-700 bg-zinc-800 px-4 py-3 font-mono text-zinc-200 placeholder-zinc-500 focus:border-emerald-500 focus:outline-none focus:ring-2 focus:ring-emerald-500/20"
              placeholder="Enter your regex pattern..."
            />
            <span class="flex items-center rounded-r-lg border border-l-0 border-zinc-700 bg-zinc-800 px-3 text-zinc-400">/</span>
          </div>
        </div>

        <!-- Flags -->
        <div>
          <label class="mb-2 block text-sm font-medium text-zinc-300">Flags</label>
          <div class="flex flex-wrap gap-3">
            <label class="flex items-center gap-2 cursor-pointer">
              <input
                type="checkbox"
                id="flag-g"
                checked
                class="size-4 rounded border-zinc-700 bg-zinc-800 text-emerald-600 focus:ring-2 focus:ring-emerald-500/20"
              />
              <span class="text-sm text-zinc-300">
                <code class="text-emerald-500">g</code> - Global
              </span>
            </label>
            <label class="flex items-center gap-2 cursor-pointer">
              <input
                type="checkbox"
                id="flag-i"
                class="size-4 rounded border-zinc-700 bg-zinc-800 text-emerald-600 focus:ring-2 focus:ring-emerald-500/20"
              />
              <span class="text-sm text-zinc-300">
                <code class="text-emerald-500">i</code> - Case insensitive
              </span>
            </label>
            <label class="flex items-center gap-2 cursor-pointer">
              <input
                type="checkbox"
                id="flag-m"
                class="size-4 rounded border-zinc-700 bg-zinc-800 text-emerald-600 focus:ring-2 focus:ring-emerald-500/20"
              />
              <span class="text-sm text-zinc-300">
                <code class="text-emerald-500">m</code> - Multiline
              </span>
            </label>
            <label class="flex items-center gap-2 cursor-pointer">
              <input
                type="checkbox"
                id="flag-s"
                class="size-4 rounded border-zinc-700 bg-zinc-800 text-emerald-600 focus:ring-2 focus:ring-emerald-500/20"
              />
              <span class="text-sm text-zinc-300">
                <code class="text-emerald-500">s</code> - Dot all
              </span>
            </label>
          </div>
        </div>

        <!-- Test String -->
        <div>
          <label class="mb-2 block text-sm font-medium text-zinc-300">Test String</label>
          <textarea
            id="test-string"
            class="w-full rounded-lg border border-zinc-700 bg-zinc-800 px-4 py-3 font-mono text-zinc-200 placeholder-zinc-500 focus:border-emerald-500 focus:outline-none focus:ring-2 focus:ring-emerald-500/20"
            rows="8"
            placeholder="Enter text to test against your regex..."
          ></textarea>
        </div>

        <!-- Results -->
        <div id="regex-results" class="hidden space-y-4">
          <!-- Match Count -->
          <div class="flex items-center gap-2">
            <span class="text-sm text-zinc-400">Matches:</span>
            <span id="match-count" class="font-semibold text-emerald-500">0</span>
          </div>

          <!-- Highlighted Text -->
          <div>
            <label class="mb-2 block text-sm font-medium text-zinc-300">Result (Highlighted)</label>
            <div
              id="highlighted-text"
              class="w-full rounded-lg border border-zinc-700 bg-zinc-800 px-4 py-3 font-mono text-sm text-zinc-200"
              style="white-space: pre-wrap; word-break: break-word;"
            ></div>
          </div>

          <!-- Match Details -->
          <div id="match-details" class="space-y-2">
            <label class="block text-sm font-medium text-zinc-300">Match Details</label>
            <div id="matches-list" class="space-y-2"></div>
          </div>
        </div>

        <!-- Error Message -->
        <div id="regex-error" class="hidden rounded-lg border border-red-900/30 bg-red-950/20 p-4">
          <div class="flex items-start gap-2">
            <svg class="size-5 text-red-400 mt-0.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <div>
              <div class="font-medium text-red-200">Invalid Regular Expression</div>
              <div id="error-message" class="mt-1 text-sm text-red-300"></div>
            </div>
          </div>
        </div>

        <!-- Quick Reference -->
        <details class="group">
          <summary class="cursor-pointer list-none rounded-lg border border-zinc-700 bg-zinc-800/50 px-4 py-3 font-medium text-zinc-200 hover:bg-zinc-800">
            <span class="inline-flex items-center gap-2">
              <svg class="size-4 transition-transform group-open:rotate-90" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
              </svg>
              Quick Reference
            </span>
          </summary>
          <div class="mt-4 rounded-lg border border-zinc-700 bg-zinc-800/50 p-4">
            <div class="grid gap-4 sm:grid-cols-2">
              <div>
                <h4 class="mb-2 font-medium text-zinc-300">Character Classes</h4>
                <div class="space-y-1 text-sm">
                  <div><code class="text-emerald-500">.</code> - Any character</div>
                  <div><code class="text-emerald-500">\\d</code> - Digit (0-9)</div>
                  <div><code class="text-emerald-500">\\w</code> - Word character</div>
                  <div><code class="text-emerald-500">\\s</code> - Whitespace</div>
                  <div><code class="text-emerald-500">[abc]</code> - Any of a, b, or c</div>
                  <div><code class="text-emerald-500">[^abc]</code> - Not a, b, or c</div>
                </div>
              </div>
              <div>
                <h4 class="mb-2 font-medium text-zinc-300">Quantifiers</h4>
                <div class="space-y-1 text-sm">
                  <div><code class="text-emerald-500">*</code> - 0 or more</div>
                  <div><code class="text-emerald-500">+</code> - 1 or more</div>
                  <div><code class="text-emerald-500">?</code> - 0 or 1</div>
                  <div><code class="text-emerald-500">{n}</code> - Exactly n times</div>
                  <div><code class="text-emerald-500">{n,}</code> - n or more times</div>
                  <div><code class="text-emerald-500">{n,m}</code> - Between n and m times</div>
                </div>
              </div>
              <div>
                <h4 class="mb-2 font-medium text-zinc-300">Anchors</h4>
                <div class="space-y-1 text-sm">
                  <div><code class="text-emerald-500">^</code> - Start of string</div>
                  <div><code class="text-emerald-500">$</code> - End of string</div>
                  <div><code class="text-emerald-500">\\b</code> - Word boundary</div>
                </div>
              </div>
              <div>
                <h4 class="mb-2 font-medium text-zinc-300">Groups</h4>
                <div class="space-y-1 text-sm">
                  <div><code class="text-emerald-500">(abc)</code> - Capturing group</div>
                  <div><code class="text-emerald-500">(?:abc)</code> - Non-capturing group</div>
                  <div><code class="text-emerald-500">a|b</code> - a or b</div>
                </div>
              </div>
            </div>
          </div>
        </details>
      </div>
    `

    const regexPattern = document.getElementById('regex-pattern') as HTMLInputElement
    const testString = document.getElementById('test-string') as HTMLTextAreaElement
    const flagG = document.getElementById('flag-g') as HTMLInputElement
    const flagI = document.getElementById('flag-i') as HTMLInputElement
    const flagM = document.getElementById('flag-m') as HTMLInputElement
    const flagS = document.getElementById('flag-s') as HTMLInputElement
    const regexResults = document.getElementById('regex-results')
    const regexError = document.getElementById('regex-error')
    const matchCount = document.getElementById('match-count')
    const highlightedText = document.getElementById('highlighted-text')
    const matchesList = document.getElementById('matches-list')
    const errorMessage = document.getElementById('error-message')

    function escapeHtml(text: string): string {
      const div = document.createElement('div')
      div.textContent = text
      return div.innerHTML
    }

    function testRegex() {
      const pattern = regexPattern?.value || ''
      const text = testString?.value || ''

      if (!pattern) {
        regexResults?.classList.add('hidden')
        regexError?.classList.add('hidden')
        return
      }

      try {
        // Build flags
        let flags = ''
        if (flagG?.checked) flags += 'g'
        if (flagI?.checked) flags += 'i'
        if (flagM?.checked) flags += 'm'
        if (flagS?.checked) flags += 's'

        const regex = new RegExp(pattern, flags)
        const matches = text.matchAll(new RegExp(pattern, flags))
        const matchArray = Array.from(matches)

        // Hide error, show results
        regexError?.classList.add('hidden')
        regexResults?.classList.remove('hidden')

        // Update match count
        if (matchCount) matchCount.textContent = matchArray.length.toString()

        // Highlight matches in text
        if (highlightedText) {
          if (matchArray.length > 0) {
            let highlighted = text
            let offset = 0
            
            matchArray.forEach(match => {
              if (match.index !== undefined) {
                const start = match.index + offset
                const end = start + match[0].length
                const before = highlighted.slice(0, start)
                const matchText = highlighted.slice(start, end)
                const after = highlighted.slice(end)
                
                highlighted = before + 
                  `<span class="bg-emerald-600/30 text-emerald-200 rounded px-1">${escapeHtml(matchText)}</span>` + 
                  after
                
                offset += 67 + escapeHtml(matchText).length - matchText.length
              }
            })
            
            highlightedText.innerHTML = highlighted
          } else {
            highlightedText.textContent = text || 'No matches found'
          }
        }

        // Display match details
        if (matchesList) {
          if (matchArray.length > 0) {
            matchesList.innerHTML = matchArray.map((match, index) => {
              const groups = match.slice(1).map((group, i) => 
                group !== undefined ? `<div class="ml-4 text-xs"><span class="text-zinc-500">Group ${i + 1}:</span> <code class="text-blue-400">${escapeHtml(group)}</code></div>` : ''
              ).join('')

              return `
                <div class="rounded-lg border border-zinc-700 bg-zinc-800/50 p-3">
                  <div class="flex items-start justify-between">
                    <div class="flex-1">
                      <div class="text-sm">
                        <span class="text-zinc-400">Match ${index + 1}:</span>
                        <code class="ml-2 text-emerald-400">${escapeHtml(match[0])}</code>
                      </div>
                      ${groups}
                    </div>
                    <div class="text-xs text-zinc-500">
                      Index: ${match.index}
                    </div>
                  </div>
                </div>
              `
            }).join('')
          } else {
            matchesList.innerHTML = '<div class="text-sm text-zinc-400">No matches found</div>'
          }
        }

      } catch (err) {
        // Show error
        regexResults?.classList.add('hidden')
        regexError?.classList.remove('hidden')
        
        if (errorMessage && err instanceof Error) {
          errorMessage.textContent = err.message
        }
      }
    }

    // Add event listeners
    regexPattern?.addEventListener('input', testRegex)
    testString?.addEventListener('input', testRegex)
    flagG?.addEventListener('change', testRegex)
    flagI?.addEventListener('change', testRegex)
    flagM?.addEventListener('change', testRegex)
    flagS?.addEventListener('change', testRegex)

    // Set some example data
    if (regexPattern) regexPattern.value = '\\w+@\\w+\\.\\w+'
    if (testString) testString.value = 'Contact us at support@example.com or sales@company.org\nYou can also reach admin@site.net for more info.'
    
    testRegex()
  }

  document.addEventListener('astro:page-load', initRegexTester)
</script>

